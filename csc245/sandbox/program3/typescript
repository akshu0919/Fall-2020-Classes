Script started on Fri 06 Nov 2020 05:20:15 PM EST
]0;kumar_a@cobra:~/csc245/program3[?1034h[kumar_a@cobra program3]$ cat -n zip.cpp
     1	using namespace std;
     2	#include "huffman.h"
     3	#include <iostream>
     4	#include <string>
     5	#include <cctype>
     6	#include <fstream>
     7	#include <cstdlib>
     8	#include <iomanip>
     9	#include <math.h>
    10	
    11	void OpenFile(ifstream& infile, int argc, char *argv[], char* filename);
    12	void compressFile(ofstream& outfile, int totalChar, HuffmanTree& H, char* filename, string& str);
    13	void readFile(ifstream& infile, HuffmanTree& H, int letters[], string& str);
    14	void makeTree(HuffmanTree& H, int letters[], int& totalChar);
    15	
    16	int main(int argc, char *argv[])
    17	{
    18		HuffmanTree H;
    19		ifstream infile;
    20		ofstream outfile;
    21	
    22		int letters[256];		
    23		int totalChar = 0;
    24		char* filename = argv[argc-1];
    25		string str = "";
    26	
    27		OpenFile(infile, argc, argv, filename);		
    28		readFile(infile, H, letters, str);
    29		makeTree(H, letters, totalChar);
    30		compressFile(outfile, totalChar, H, filename, str);
    31	
    32		return 0;
    33	}
    34	
    35	void OpenFile (ifstream& infile, int argc, char *argv[], char* filename)
    36	{
    37	        if(argc == 1)
    38	        {
    39	                cout << "Error!! No File Entered." << endl;
    40	                exit(1);
    41	        }
    42		if(!filename)
    43		{
    44			cout<< "File does not exist." << endl;
    45			exit(1);
    46		}
    47	
    48	        string file = (string) filename;
    49	        infile.open(file.c_str());
    50	}
    51	  
    52	void compressFile(ofstream& outfile, int totalChar, HuffmanTree& H, char* filename, string& str)
    53	{
    54		
    55		string line= "";
    56		line += filename;
    57	        line +=".zip";
    58	        outfile.open(line.c_str());
    59		
    60		outfile << totalChar << endl;
    61		char ch;
    62	
    63		for(char ch = char(1); ch <= char(126); ch++)
    64		{
    65			bool inTree = H.inTree(ch);
    66			if(inTree)
    67			{
    68				int ascii = (int) ch;
    69				outfile << ascii << " " << H.GetCode(ch) << endl;
    70			}
    71		}
    72	
    73		string end = "";
    74	
    75		for(int i = 0; i < str.length(); i++)
    76		{
    77			end += H.GetCode(str[i]);	
    78		}
    79	
    80		outfile << end << endl;
    81	
    82		double Bits = (double) end.length();
    83		double chars = (double) totalChar * 8.0;
    84		double ratio = (1 - (Bits / chars)) * 100;
    85	
    86		cout << "File Successfully Compressed to " << end.length() 
    87			<< " Bits ("<< setprecision(4)  << fabs(ratio) << "%)" << endl;
    88	}
    89	
    90	void readFile(ifstream& infile, HuffmanTree& H, int letters[], string& str)
    91	{
    92		char ch;
    93	
    94		for(char ch = char(0); ch <= char(126); ch++)
    95		{
    96			letters[ch]=0;
    97		}
    98		
    99		
   100		infile.get(ch);
   101		while(infile)
   102		{
   103			str += ch;
   104			letters[ch] += 1;
   105			infile.get(ch);
   106		}
   107			
   108	}
   109	
   110	void makeTree(HuffmanTree& H, int letters[], int& totalChar)
   111	{	
   112		for(char ch = char(0); ch <= char(126); ch++)
   113		{
   114			if(letters[ch] != 0)
   115			{
   116				totalChar++;
   117				H.insert(ch, letters[ch]);		
   118					
   119			}
   120		}
   121		
   122		H.build();
   123	}
]0;kumar_a@cobra:~/csc245/program3[kumar_a@cobra program3]$ cat hug[Kffman.h
#include <vector>
#include <string>
using namespace std;

struct HNode {
    char ch;
    int weight;
    int parent;
    int childType;
};

class HuffmanTree {
    public:
	HuffmanTree();				// constructor

	void insert(char ch, int weight);	// inserts a character and its associated weight
						// into a node of the Huffman tree

	bool inTree(char ch);			// returns a boolean value indicating whether
						// a given character is stored in the tree
		
	int GetFrequency(char ch);		// returns the weight of a given character

	
	void build();				// Builds the Huffman Tree;
	

	string GetCode(char ch);		// returns the compressed code of a given
						// character in the tree using recursion

	void PrintTable();			// displays the Huffman encoding table used in
						// the compression process
	
	int numNodes();				// returns the number of nodes currently in Huffman 
						// tree
	
	char getChar(int index);	

    private:
	vector<HNode> nodes;
	int numChars;
	bool built;                             
	
	int lookUp(char ch);			// returns the index of a given character in tree
	int GetFrequency(int i);		// returns the weight at a given index
	string GetCode(int i);			// returns the compressed code of the character at 
						// a given index
};
]0;kumar_a@cobra:~/csc245/program3[kumar_a@cobra program3]$ cat huffman.cpp
#include "huffman.h"
#include <iostream>
#include <climits>
using namespace std;

HuffmanTree:: HuffmanTree()
	: numChars(0), built(false) {}

void HuffmanTree:: insert(char ch, int weight) {
    HNode newNode = {ch, weight, 0, -1}; 
    built = false;
    nodes.push_back(newNode);
    numChars++;

}

bool HuffmanTree:: inTree(char ch) {
	bool in = false;

	for(int i = 0; i < numChars; i++)
	{
		if(nodes[i].ch == ch)
		{
			in = true;
		}
	}

	return in;
}

int HuffmanTree:: GetFrequency(char ch) {

	int loc = lookUp(ch);
	GetFrequency(loc);

}

int HuffmanTree:: GetFrequency(int i) {

	return nodes[i].weight;

}

int HuffmanTree:: lookUp(char ch) {

	int loc = -1;

	if(inTree(ch))
	{
		for(int i = 0; i < numChars; i++)
		{
			if(nodes[i].ch == ch)
			{
				loc = i;
			}
		}
	}

	return loc;

}

string HuffmanTree:: GetCode(char ch) {

	int loc = lookUp(ch);
	return GetCode(loc);

}


string HuffmanTree:: GetCode(int i) {

	if(nodes[i].parent == 0)
	{
		return "";
	}
	else
		return (GetCode(nodes[i].parent) + (char)(nodes[i].childType + '0'));
}

void HuffmanTree:: PrintTable() {

	cout << "\t" << "++++	Encoding Table	++++" << endl;
	cout << "Index" << "\t" << "Char" << "\t" << "Weight" << "\t" << "Parent" << "\t" << "ChildType" << endl;

	int count = 1;
	for(int i = 0; i < numChars; i++)
	{
		if(nodes[i].ch == '\0')
		{
			cout << i << "\t" << "T" << count++ << "\t" << nodes[i].weight << "\t"
				<< nodes[i].parent << "\t" << nodes[i].childType << endl;
		}
		else if(nodes[i].ch == '\n')
		{
			cout << i << "\t" << "nl" << "\t" << nodes[i].weight << "\t"  
				<< nodes[i].parent << "\t" << nodes[i].childType << endl;
		}
		else if(nodes[i].ch == ' ')
		{
			cout << i << "\t" << "sp" << "\t" << nodes[i].weight << "\t"
                                << nodes[i].parent << "\t" << nodes[i].childType << endl;
		}
		else
		{
			cout << i << "\t" << nodes[i].ch << "\t" << nodes[i].weight << "\t"
                                << nodes[i].parent << "\t" << nodes[i].childType << endl;
		}	
	}	
}

int HuffmanTree:: numNodes() {

	return numChars;	

}

void HuffmanTree:: build() {
		
	int exit = (2 * numChars) - 1;
	int min, min2;
		
	while(numChars < exit)
	{
		int small;
		small = INT_MAX;
	
		for(int i = 0; i < numChars; i++)
		{
			if((nodes[i].parent == 0) && (nodes[i].weight < small))
			{
				min = i;
				small = nodes[i].weight;
			}
		}

		small = INT_MAX;
		
		for(int j = 0; j < numChars; j++)
		{
			if((nodes[j].parent == 0) && (nodes[j].weight < small)  && (j != min) )
			{
		  		min2 = j;
				small = nodes[j].weight;
			}
		}
		
		HNode total = {'\0', (nodes[min].weight + nodes[min2].weight), 0, -1};
		nodes.push_back(total);

		nodes[min].parent = numChars;
	  	nodes[min2].parent = numChars;

		nodes[min].childType = 0;
	  	nodes[min2].childType =1;

		numChars++;
	}

	built = true;
}

char HuffmanTree:: getChar(int index) {
		
	return nodes[index].ch;

}
]0;kumar_a@cobra:~/csc245/program3[kumar_a@cobra program3]$ c++ zip.cpp huffman.o
]0;kumar_a@cobra:~/csc245/program3[kumar_a@cobra program3]$ mv a.out myZip
]0;kumar_a@cobra:~/csc245/program3[kumar_a@cobra program3]$ c++ unzip.cpp 
]0;kumar_a@cobra:~/csc245/program3[kumar_a@cobra program3]$ mv a.out myUnzip
]0;kumar_a@cobra:~/csc245/program3[kumar_a@cobra program3]$ a.out sample4.zip[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K./UNZIP [K[K[K[K[K[Kmyu[K[K[K[K[KmyUnzip sample4.zip
File Successfully Inflated Back To Original
]0;kumar_a@cobra:~/csc245/program3[kumar_a@cobra program3]$ mu[Kyzip [K[K[K[KZip sample2
File Successfully Compressed to 151 Bits (57.29%)
]0;kumar_a@cobra:~/csc245/program3[kumar_a@cobra program3]$ exit
exit

Script done on Fri 06 Nov 2020 05:22:38 PM EST
