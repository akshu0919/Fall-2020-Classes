I converted infix expression into a postfix by using the rules as discussed in class. If a ( was seen then it was put onto the stack and any operands were added onto a string. Any operators were checked for precedence using the pemdas function and then added to the stack accordingly. In the end once the string was complete it was run through the postfixExpression method to convert it into a postfix expression.

insertOperand: I first created a BETPtr and made the info.whichType = OPERAND since it is a operand and we utilize the union in this part because something can only be one type either a OPERAND or OPERATOR. Then i set the info.theContent.variable equal to the passed in token. Since this is a operand and all operands are leaves they their children are null. so the left and right were set to null. Finally the BETPtr we delcares was pushed onto the stack.

insertPostfixOperator: I first created a BETPtr and made the right child of it be the top of the stack and then the left child be the next thing on top of the stack after removing the first one that we put in the right child. Then the info.whichType was set to OPERATOR since these nodes were operators. then the info.theContent.opsymbol was set to the passed in token. This BETPtr was then pushed onto the stack and the root was set to be this BETPtr.

insertPrefixOperator: I first created a BETPtr but this time I made the left child be the top of the stack and the right child was the next thing on top of the stack after removing the first on that we put in the left child. Then again the indo.whichType was set to OPERATOR since these nodes are also operators. Then the info.theContent.opsymbol was set to the passed in tokena dn the BETPtr was pushed onto the stack. The root was then set to be the BETPtr.
